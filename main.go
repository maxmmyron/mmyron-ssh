package main

import (
	"context"
	"errors"
	"fmt"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/76creates/stickers"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/charmbracelet/ssh"
	"github.com/charmbracelet/wish"
	"github.com/charmbracelet/wish/activeterm"
	"github.com/charmbracelet/wish/bubbletea"
	"github.com/charmbracelet/wish/logging"
)

const (
	useHighPerformanceRenderer = false
	host                       = "localhost"
	port                       = "23234"
)

var helpStyle = lipgloss.NewStyle().Foreground(lipgloss.Color("241")).Render

func main() {
	srv, err := wish.NewServer(
		wish.WithAddress(net.JoinHostPort(host, port)),
		// ED25519 key generated by default
		wish.WithHostKeyPath(".ssh/id_ed25519"),
		wish.WithMiddleware(
			bubbletea.Middleware(teaHandler),
			activeterm.Middleware(),
			logging.Middleware(),
		),
	)

	if err != nil {
		log.Error("Couldn't start server", err)
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	log.Info("Server started @", "host", host, "port", port)

	// TODO: what does this do? similar to IIFE in JS?
	go func() {
		if err = srv.ListenAndServe(); err != nil && !errors.Is(err, ssh.ErrServerClosed) {
			log.Error("Could not start server", err)
			done <- nil
		}
	}()

	// TODO: what does this do?
	<-done

	log.Info("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)

	defer func() { cancel() }()

	if err := srv.Shutdown(ctx); err != nil && !errors.Is(err, ssh.ErrServerClosed) {
		log.Error("Could not shutdown server", err)
	}
}

func teaHandler(s ssh.Session) (tea.Model, []tea.ProgramOption) {
	// build a new model
	m, err := CreateModel()

	if err != nil {
		fmt.Println("Could not initialize Bubble Tea model:", err)
		return model{}, nil
	}

	return m, []tea.ProgramOption{tea.WithAltScreen(), tea.WithMouseCellMotion()}
}

func CreateModel() (*model, error) {
	const defaultWidth = 78
	const defaultHeight = 20

	vp := viewport.New(defaultWidth, defaultHeight)
	vp.Style = lipgloss.NewStyle().Width(defaultWidth).Height(defaultHeight).Background(lipgloss.Color("241"))

	flexBox := stickers.NewFlexBox(0, 0)

	row := stickers.FlexBoxRow{}

	row.AddCells([]*stickers.FlexBoxCell{
		stickers.NewFlexBoxCell(1, 1).SetStyle(lipgloss.NewStyle().Background(lipgloss.Color("#fc5c65"))),
		stickers.NewFlexBoxCell(1, 1).SetStyle(lipgloss.NewStyle().Background(lipgloss.Color("#fd9644"))),
		stickers.NewFlexBoxCell(1, 1).SetStyle(lipgloss.NewStyle().Background(lipgloss.Color("#fed330"))),
	})

	flexBox.AddRows([]*stickers.FlexBoxRow{&row})

	// vp.Style = lipgloss.NewStyle().
	// 	Align(lipgloss.Center).
	// 	BorderStyle(lipgloss.RoundedBorder()).
	// 	BorderForeground(lipgloss.Color("62")).
	// 	PaddingRight(2)

	// renderer, err := glamour.NewTermRenderer(
	// 	glamour.WithAutoStyle(),
	// 	glamour.WithWordWrap(defaultWidth),
	// )
	// if err != nil {
	// 	return nil, err
	// }

	// content, err := os.ReadFile("fs/root.md")
	// if err != nil {
	// 	return nil, err
	// }

	// str, err := renderer.Render(string(content))
	// if err != nil {
	// 	return nil, err
	// }

	// vp.SetContent(str)

	return &model{
		viewport: vp,
		flexbox:  flexBox,
	}, nil
}

type model struct {
	viewport viewport.Model
	flexbox  *stickers.FlexBox
}

func (m model) Init() tea.Cmd {
	return nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.viewport.Height = msg.Height - 2
		m.viewport.Width = msg.Width
		m.viewport.Style = m.viewport.Style.Width(msg.Width).Height(msg.Height)
		m.flexbox.SetWidth(msg.Width)
		m.flexbox.SetHeight(msg.Height)

		row, exists := m.flexbox.GetRow(0)
		if exists {
			row.Cell(1).SetContent("Width: " + fmt.Sprint(msg.Width))
		}

		return m, nil
	case tea.KeyMsg:
		switch msg.String() {
		case "q", "ctrl+c", "esc":
			return m, tea.Quit
		default:
			var cmd tea.Cmd
			m.viewport, cmd = m.viewport.Update(msg)
			return m, cmd
		}
	default:
		return m, nil
	}
}

func (m model) View() string {
	// return m.viewport.View() + helpView()
	return m.flexbox.Render()
}

func helpView() string {
	return helpStyle("\n  ↑/↓: Navigate • q: Quit\n")
}

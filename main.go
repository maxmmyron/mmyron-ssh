package main

import (
	"context"
	"errors"
	"fmt"
	"net"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/glamour"
	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/charmbracelet/ssh"
	"github.com/charmbracelet/wish"
	"github.com/charmbracelet/wish/activeterm"
	"github.com/charmbracelet/wish/bubbletea"
	"github.com/charmbracelet/wish/logging"
	"golang.org/x/term"
)

const (
	useHighPerformanceRenderer = false
	host                       = "localhost"
	port                       = "23234"
	width                      = 80
)

var (
	subtle = lipgloss.AdaptiveColor{Light: "#D9DCCF", Dark: "#383838"}
	// highlight = lipgloss.AdaptiveColor{Light: "#874BFD", Dark: "#7D56F4"}
	special   = lipgloss.AdaptiveColor{Light: "#DB22CE", Dark: "#DB46CF"}
	helpStyle = lipgloss.NewStyle().Foreground(subtle).BorderTop(true).BorderTopForeground(subtle).Render
	selected  = -1
	paths     = []string{
		"fs/root.md",
		"fs/posts/1.md",
		"fs/posts/2.md",
		"fs/posts/3.md",
	}
)

func main() {
	srv, err := wish.NewServer(
		wish.WithAddress(net.JoinHostPort(host, port)),
		// ED25519 key generated by default
		wish.WithHostKeyPath(".ssh/id_ed25519"),
		wish.WithMiddleware(
			bubbletea.Middleware(teaHandler),
			activeterm.Middleware(),
			logging.Middleware(),
		),
	)

	if err != nil {
		log.Error("Couldn't start server", err)
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	log.Info("Server started @", "host", host, "port", port)

	// TODO: what does this do? similar to IIFE in JS?
	go func() {
		if err = srv.ListenAndServe(); err != nil && !errors.Is(err, ssh.ErrServerClosed) {
			log.Error("Could not start server", err)
			done <- nil
		}
	}()

	// TODO: what does this do?
	<-done

	log.Info("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)

	defer func() { cancel() }()

	if err := srv.Shutdown(ctx); err != nil && !errors.Is(err, ssh.ErrServerClosed) {
		log.Error("Could not shutdown server", err)
	}
}

func teaHandler(s ssh.Session) (tea.Model, []tea.ProgramOption) {
	// build a new model
	m, err := CreateModel()

	if err != nil {
		fmt.Println("Could not initialize Bubble Tea model:", err)
		return model{}, nil
	}

	return m, []tea.ProgramOption{tea.WithAltScreen(), tea.WithMouseCellMotion()}
}

func CreateModel() (*model, error) {
	physWidth, physHeight, _ := term.GetSize(int(os.Stdout.Fd()))

	vp := viewport.New(physWidth, physHeight)

	content, err := os.ReadFile("fs/root.md")

	if err != nil {
		return nil, err
	}

	return &model{
		viewport: vp,
		path:     "fs/root.md",
		content:  string(content),
	}, nil
}

type model struct {
	viewport viewport.Model
	path     string
	content  string
}

func (m model) Init() tea.Cmd {
	return nil
}

func RebuildGlamourViewport(m model) (model, error) {
	// render content to dynamic size
	renderer, err := glamour.NewTermRenderer(
		glamour.WithStandardStyle("dracula"),
		glamour.WithWordWrap(min(m.viewport.Width, 78)),
	)

	if err != nil {
		return m, nil
	}

	str, err := renderer.Render(m.content)

	if err != nil {
		return m, nil
	}

	// if root, then grab all paths to render @ bottom of page (as a selector)
	if m.path == "fs/root.md" {
		// render paths
		pathsStr := ""

		for i, p := range paths {
			if i == selected {
				pathsStr += lipgloss.NewStyle().Foreground(special).Render(fmt.Sprintf(" %s ", p))
			} else {
				pathsStr += fmt.Sprintf(" %s ", p)
			}
		}

		str += pathsStr
	}

	m.viewport.SetContent(lipgloss.Place(m.viewport.Width, m.viewport.Height, lipgloss.Center, lipgloss.Top, str))

	return m, nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.viewport.Width = msg.Width
		m.viewport.Height = msg.Height - 5
		m.viewport.Style = lipgloss.NewStyle().Width(m.viewport.Width).Height(m.viewport.Height)
	case tea.KeyMsg:
		switch msg.String() {
		case "esc":
			if m.path != "fs/root.md" {
				m.path = "fs/root.md"
				selected = -1
				content, err := os.ReadFile(m.path)

				if err != nil {
					return m, nil
				}

				m.content = string(content)

			} else {
				// quit if on root page
				return m, tea.Quit
			}
		case "q", "ctrl+c":
			return m, tea.Quit
		case "tab":
			if m.path != "fs/root.md" {
				return m, nil
			}

			selected = (selected + 1) % len(paths)
		case "shift+tab":
			if m.path == "fs/root.md" {
				return m, nil
			}

			selected = (selected - 1) % len(paths)
		case "enter":
			if selected != -1 && paths[selected] != m.path {
				m.path = paths[selected]
				content, err := os.ReadFile(m.path)

				if err != nil {
					return m, nil
				}

				m.content = string(content)

			}
		default:
			var cmd tea.Cmd
			m.viewport, cmd = m.viewport.Update(msg)
			return m, cmd
		}
	default:
		return m, nil
	}

	// if we don't exit early, we need to rerender the content
	m, err := RebuildGlamourViewport(m)

	if err != nil {
		fmt.Println("Could not rerender content:", err)
	}

	return m, nil
}

func (m model) View() string {
	return pathView(m) + m.viewport.View() + "\n" + helpView(m)
}

func pathView(m model) string {
	path := fmt.Sprintf(" %s ", m.path)
	width := min(m.viewport.Width, 74)

	padded := lipgloss.Place(width, 1, lipgloss.Left, lipgloss.Center, lipgloss.NewStyle().Foreground(special).Render(path), lipgloss.WithWhitespaceChars("-"), lipgloss.WithWhitespaceForeground(subtle))
	return lipgloss.Place(m.viewport.Width, 2, lipgloss.Center, lipgloss.Center, padded)
}

func helpView(m model) string {
	// pad to viewport width
	const help = ` ↑/↓: Scroll • tab: Focus • q: Quit `
	width := min(m.viewport.Width, 74)

	padded := lipgloss.Place(width, 1, lipgloss.Left, lipgloss.Center, lipgloss.NewStyle().Foreground(special).Render(help), lipgloss.WithWhitespaceChars("-"), lipgloss.WithWhitespaceForeground(subtle))
	return lipgloss.Place(m.viewport.Width, 3, lipgloss.Center, lipgloss.Center, padded)
}
